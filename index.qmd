---
title: "Game Metrics: Decoding Premier League Outcomes Through Visual Analysis and Data Exploration"
subtitle: "INFO 526 - Project 1"
author: "Group 4 WackyWednesday"
format: html
editor: visual
---

```{r}
#| label: load-pkgs
#| message: false
#| output: false
#| echo: false
if(!require(pacman))
  install.packages("pacman")

pacman::p_load(
  tidyverse,
  here,
  ggthemes,
  viridis,
  ggcorrplot,
  devtools,
  ragg
  )

options(width = 65)

knitr::opts_chunk$set(
  fig.asp = 0.618,
  fig.align = "center"
)
```

```{r}
#| label: load-dataset
#| message: false
#| echo: false
soccer <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-04/soccer21-22.csv')
```

## Abstract

*Add project abstract here; delete this text when done*

## Introduction

*Add introduction here; delete this text when done*

## Question 1

*Intro goes here; delete this text when done*

##Question 1 (ii) 

*Does the Home advantage played a major role in outcome of the result? Summarize for Total games won by Home and Away team. Summarize for Total goals scored by each team in Home and Away Conditions.*

### Approach

*Approach goes here; delete this text when done*

*Question 1 (ii) By comparing the Full Time Result (FTR),Home Advantage, and the Away advantage combining all and summary is created with the help of Home_Advantage variable Where if the Result is "H" it will be added to home team victory otherwise it will be added to Away team victory. summarizing the output Bar plot for Total Games *
*To find the total goals scored by individual team in home and away- Advantage summary is created and combined together to form a new Total goals variable. And Now with Home team, Total variable as aesthetic layers Bar plot is created side by side to interpret the outcome for all 20 teams*

**

### Analysis


*Question 1 ii : As per the data_set, The home game winning advantage did not created impact in every games but only in some games whereas for the goal scored ratio in home and away match except few teams, majority of the team scored more goals in home than in away. *

#### Correlation between half-time and full-time goals.

```{r}
#| label: q1_goals
#| message: false
#| warning: false

#Create tibbles based on if the home or away team scored the goals. This makes it easier to color-code the scatterplot and calculate separate linear regressions later.
home_goals <- tibble(soccer$HTHG, soccer$FTHG)
home_goals <- home_goals %>% 
  rename(
     'half' = 'soccer$HTHG',
     'full' = 'soccer$FTHG'
  )

away_goals <- tibble(soccer$HTAG, soccer$FTAG)
away_goals <- away_goals %>% 
  rename(
    'half' = 'soccer$HTAG',
    'full' = 'soccer$FTAG'
  )

#Create color vector to color-code home versus away in the scatterplot and regressions.
colors <- c('Home' = 'blue', 'Away' = 'red')

#Create scatterplot with two regression lines for home and away teams, respectively.
q1_goals <- ggplot() + 
  geom_jitter(data = home_goals, aes(x = half, y = full, color = 'Home'), width = 0.7) +
  geom_smooth(data = home_goals, aes(x = half, y = full, color = 'Home'), method = lm, se = FALSE) +
  geom_jitter(data = away_goals, aes(x = half, y = full, color = 'Away'), width = 0.7) +
  geom_smooth(data = away_goals, aes(x = half, y = full, color = 'Away'), method = lm,  se = FALSE) + 
  xlim(0, 4) +
  labs( x = 'Half-time Goals',
        y = 'Full-time Goals',
        color = 'Team') +
  theme_minimal(base_size = 12) +
  scale_color_manual(values = colors) +
  guides(color = guide_legend(reverse = TRUE)) #Switch legend entries.

#Suppress warning messages when printing ggplot object.
suppressMessages(print(q1_goals))

```
```{r}
#| label: q1ii_Totalgames_by_Home_and_Away
#| message: false
#| warning: false

# Create a variable for home team advantage
soccer <- soccer %>%
  mutate(HomeAdvantage = ifelse(FTR == "H", "Home Team Win", "Away Team Win"))

# Analyze home and away team advantage
advantage_summary <- soccer %>%
  group_by(HomeAdvantage) %>%
  summarise(TotalGames = n())

# Print the result
print(advantage_summary)
```

```{r}
# Bar plot for home and away team advantage

ggplot(advantage_summary, aes(x = HomeAdvantage, y = TotalGames, fill = HomeAdvantage)) +
  geom_bar(stat = "identity") +
  labs(title = "Distribution of Home and Away Team Wins",
       x = "Win_Count", y = "Total Games") +
  scale_fill_manual(values = c("Home Team Win" = "lightgreen", "Away Team Win" = "red")) +
  theme_minimal()
```

```{r}
total_home_goals <-soccer %>%
  group_by(HomeTeam) %>%
  summarize(Total_Home_goals = sum(FTHG))
 
total_away_goals <-soccer %>%
  group_by(AwayTeam) %>%
  summarize(Total_Away_goals = sum(FTAG))

print(total_home_goals)
print(total_away_goals)
```

```{r}
# Merge the data for home and away goals
total_goals <- merge(total_home_goals, total_away_goals, by.x = "HomeTeam", by.y = "AwayTeam", all = TRUE)

total_goals_long <- gather(total_goals, key = "TeamType", value = "TotalGoals", -HomeTeam)

# Create a side-by-side bar plot
ggplot(total_goals_long , aes(x = HomeTeam, y = TotalGoals, fill = TeamType)) +
  geom_bar(position = "dodge", stat = "identity") +
  labs(title = "Total Home and Away Goals by Team",
       x = "Teams on Home and Away", y = "Total Goals") +
  scale_fill_manual(values = c("Total_Home_goals" = "lightgreen", "Total_Away_goals" = "red")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


### Discussion

*Discussion goes here; delete this text when done*

## Question 2

### Introduction

The correlation between the variables used for the analysis are first scrutinized to reveal any possible correlations amongst them.

```{r dev = 'ragg_png'}
#| message: false
#| label: corr_plot

soccer_corr <- soccer |>
  mutate(
    HTFCR = (HR + HY)/ HF,
    ATFCR = (AR + AY/ AF)
  ) |>
  pivot_longer( cols = c( 'HF', 'AF'),
                names_to = 'Team_Fouls',
                values_to = 'Fouls') |>
  pivot_longer( cols = c( 'HY', 'AY'),
                names_to = 'Team_Yellows',
                values_to = 'yellow_cards') |>
  pivot_longer( cols = c( 'HR', 'AR'),
                names_to = 'Team_Reds',
                values_to = 'red_cards') |>
  pivot_longer(
    cols = c( 'HTFCR', 'ATFCR'),
    names_to = 'Team',
    values_to = 'FCR'
  ) |>
  pivot_longer(
    cols = c('FTHG', 'FTAG'),
    names_to = 'TFTG', values_to = 'FTG'
  )


soccer_corr <- soccer_corr |>
  select( red_cards, yellow_cards, Fouls, FCR, FTG ) |>
  rename( 'ðŸŸ¥' = red_cards, 'ðŸŸ¨' = yellow_cards )

cor_matrix <- round(cor(soccer_corr) , 2)
ggcorrplot(cor_matrix , hc.order =  TRUE, type = 'lower' , lab = TRUE ) +
  theme_minimal( ) +
  theme( legend.position = 'none',
         panel.grid = element_blank(),
         ) +
  labs(
    x = "",
    y = '',
    title = "The correlation between the variables used for the analysis",
    subtitle = "Card Foul Ratio(FCR),Yellow cards(ðŸŸ¨) ,\nRed cards(ðŸŸ¥) and Full Time Goals (FTG)"
  )

```

*Intro goes here; delete this text when done*

### Approach

*Approach goes here; delete this text when done*

### Analysis

*Analysis goes here; delete this text when done*

#### Penalties by Team

```{r}
#| label: q2_penalties
#| message: false

q2_penalties_viz <- soccer |> 
  rename(
    yellow_home = HY, yellow_away = AY,
    red_home = HR, red_away = AR,
    foul_home = HF, foul_away = AF
  ) |> 
  select(
    yellow_home, yellow_away,
    red_home, red_away,
    foul_home, foul_away
  ) |> 
  mutate(game_number = row_number()) |> 
  group_by(game_number) |> 
  pivot_longer(
    cols = c(yellow_home, red_home,
             yellow_away, red_away,
             foul_away, foul_home),
    names_to = "pen_type",
    values_to = "pen_count"
  ) |> 
  mutate(
    pen_cat = case_when(
      str_detect(pen_type, "yellow") ~ "yellow",
      str_detect(pen_type, "red") ~ "red",
      str_detect(pen_type, "foul") ~ "foul"
    ),
    h_a = case_when(
      str_detect(pen_type, "home") ~ "Home",
      str_detect(pen_type, "away") ~ "Away"
    )
  ) |>
  group_by(h_a, pen_count, pen_cat) |> 
  select(!pen_type) |> 
  summarize(tot = n()) |> 
  # filter(pen_count !=0) |>
  mutate(
    pen_cf = case_when(
      pen_cat == "foul" ~ "Fouls",
      TRUE ~ "Cards"
    )
  ) |> 
  ggplot(aes(x = pen_count,
             y = tot,
             group = pen_cat,
             color = h_a)) +
  facet_wrap(
    ~ pen_cf,
    ncol = 1,
    scales = "free",
    strip.position = "right"
    # space="free"
  ) +
  geom_line(
    aes(group = interaction(pen_cat, h_a)),
    linewidth = 1,
    alpha = 0.5
  ) +
  geom_point(
    aes(shape = h_a),
    size = 3,
    stroke = 1
  ) +
  # Annotations for Card facet
  geom_text(
    data = data.frame(
      "label" = c("Red", "Yellow"),
      x = c(0.5, 1.5),
      y = c(300, 150),
      # x = c(1.5, 1.5),
      # y = c(25, 125),
      pen_cf = c("Cards", "Cards")
    ),
    aes(x = x, y = y, group = 1, label=label),
    color = "black",
    family = "mono"
  ) +
  # Theme settings
  scale_color_brewer(
    palette = "Set2",
    breaks = c("Home", "Away")
  ) +
  scale_shape_manual(
    breaks = c("Home", "Away"),
    values = c(3, 4)
  ) +
  theme_classic() +
  theme(
    text = element_text(family = "mono"),
    #legend.position = "inside",
    #legend.position.inside = c(0.9, 0.9),
    legend.box.background = element_rect(),
    plot.title.position = "plot"
  ) +
  labs(
    title = "Number of football games by amounts of penalties",
    x = "Total penalties in a game",
    y = "Number of games",
    color = "Team",
    shape = "Team",
    subtitle = "Premier League match data, 2021-2022"
  )

q2_penalties_viz
```

#### Cards:Fouls Ratio by Team

```{r}
#| label: q2_ctf
#| message: false

soccer_ctf <- soccer |>
  mutate(
    HTFCR = (HR + HY)/ HF,
    ATFCR = (AR + AY/ AF)
  ) |>
  rename(
    'Home' = 'HTFCR',
    'Away' = 'ATFCR'
  )
soccer_ctf <- soccer_ctf |>
  pivot_longer(
    cols = c( 'Home', 'Away'),
    names_to = 'Team',
    values_to = 'FCR'
  )
soccer_ctf |>
  ggplot( aes( x = FCR ) ) +
  geom_density( aes( fill = Team ), alpha = 0.4 ) +
  scale_fill_viridis(
    discrete = TRUE, option = "C"
  ) +
  theme_minimal( )  +
  labs( x = 'Card Foul Ratio',
        y = 'Density',
        title = 'The distribution of card foul ratios across teams',
        caption = 'TidyTuesday')
```

### Discussion

*Discussion goes here; delete this text when done*

```{r}
#| label: q2_ctf2
#| message: false

#make new Dataset
# Selecting only the necessary columns 

Compare_dataset <- soccer[, c("HomeTeam", "AwayTeam", "HF", "HR", "HY", "AF", "AR", "AY")] # Avoid division by zero by adding a small number (epsilon) to the denominator 

epsilon <- 0.001 # Calculating Home Foul Ratio 

Compare_dataset$HFR = Compare_dataset$HF / (Compare_dataset$HY + Compare_dataset$HR+epsilon) 
# Calculating Away Foul Ratio 
Compare_dataset$AFR = Compare_dataset$AF / (Compare_dataset$AY + Compare_dataset$AR + epsilon)

Compare_dataset

# Melt the dataset for plotting (tidyr pivot_longer is the newer alternative to gather) 

plot_data <- Compare_dataset %>% 
  pivot_longer(cols = c(HF, HR, HY, AF, AR, AY), names_to = "Category", values_to = "Count")%>%
  mutate(Type = case_when( str_detect(Category, "F") ~ "Fouls", 
                           str_detect(Category, "R") ~ "Red Cards", 
                           str_detect(Category, "Y") ~ "Yellow Cards" ), 
         Team = case_when( str_detect(Category, "^H") ~ "Home", 
                           str_detect(Category, "^A") ~ "Away" )) %>% 
  select(-Category) %>% 
  group_by(Type, Team) %>% 
  summarise(AverageCount = mean(Count, na.rm = TRUE)) 


ggplot(plot_data, aes(x = Type, y = AverageCount, fill = Team)) + 
  geom_bar(stat = "identity", 
           position = position_dodge(width = 0.9)) + 
  geom_text(aes(label = round(AverageCount, 2), 
                y = AverageCount + 0.02),  # Adjust the y position for visibility 
                position = position_dodge(width = 0.9), 
            vjust = 0, # Vertical adjustment; 0 means right above the bar 
            size = 3) + # Text size, adjust as needed 
  theme_minimal() + 
  labs(title = "Average Fouls, Red Cards, and Yellow Cards for Home vs. Away Teams", x = "", y = "Average Count") + 
  scale_fill_manual(values = c("Home" = "#dcb89e", "Away" = "#b8e1d3")) # Set your own colors here





```

### 
